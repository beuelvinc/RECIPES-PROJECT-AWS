image: docker:latest

services:
  - docker:20.10.12-dind

variables:
  DOCKER_DRIVER: overlay

stages:
  - pre_test
  - build
  - deploy

test:
  stage: pre_test
  script:
    - docker-compose -f docker-compose.yml run django_gunicorn python manage.py test

#
#deploy to s3:
#  stage: deploy
#  image:
#    name: amazon/aws-cli
#    entrypoint: [""]
#
#  rules:
#    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
#  script:
#    -  aws s3 sync . s3://test-19.02 --exclude ".venv/*" --include "*" --delete
#


build the docker:
  stage: build
  image: docker/compose
  script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
    - docker-compose up -d
    - docker image ls
    - echo $CI_REGISTRY_IMAGE
    - docker push --all-tags $CI_REGISTRY_IMAGE





deploy to production:
    image:
        name: amazon/aws-cli:2.4.11
        entrypoint: [""]
    stage: deploy
    variables:
        APP_NAME: My website
        APP_ENV_NAME: Mywebsite-env
    environment: production
    script:
        - yum install -y gettext
        - export DEPLOY_TOKEN=$(echo $GITLAB_DEPLOY_TOKEN | tr -d "\n" | base64)
        - envsubst < aws_templates/Dockerrun.aws.json > Dockerrun.aws.json
        - envsubst < aws_templates/auth.json > auth.json
        - cat Dockerrun.aws.json
        - cat auth.json
        - aws s3 cp Dockerrun.aws.json s3://$AWS_S3_BUCKET/Dockerrun.aws.json
        - aws s3 cp auth.json s3://$AWS_S3_BUCKET/auth.json
        - aws elasticbeanstalk create-application-version --application-name "$APP_NAME" --version-label demo --source-bundle S3Bucket=$AWS_S3_BUCKET,S3Key=Dockerrun.aws.json
        - aws elasticbeanstalk update-environment --application-name "$APP_NAME" --version-label demo --environment-name $APP_ENV_NAME


